#include <iostream>
#include <cstdlib>
#define COUNT_CARDS 20
#define COUNT_GREEN 10
using namespace std;


struct Cards
{
	string color;
	int value;
	int quantity = 0;
} cards[200];


struct Player
{
	int number = 0;
	int quantity_cards;
	int quantity_hidden;
	int cards_value = 0;
	int hidden_cards = 0;
	string colorl;
}p1[200], p2[200], p3[200], p4[200], p5[200], p6[200];


/*
void dealing_cards(int n, int k, int g, int gv, int o) {
	if (n == 2) {
		for (int i = 0; i < g + k * o; i++) {
			p1[i].cards_value = cards[2 * i].value;
			p1[i].colorl = cards[2 * i].color;
			p2[i].cards_value = cards[2 * i + 1].value;
			p2[i].colorl = cards[2 * i + 1].color;
		}
	}
	else if (n == 3) {
		for (int i = 0; i < g + k * o; i++) {
			p1[i].cards_value = cards[3 * i].value;
			p1[i].colorl = cards[3 * i].color;
			p2[i].cards_value = cards[3 * i + 1].value;
			p2[i].colorl = cards[3 * i + 1].color;
			p3[i].cards_value = cards[3 * i + 2].value;
			p3[i].colorl = cards[3 * i + 2].color;

		}
	}
	else if (n == 4) {
		for (int i = 0; i < g + k * o; i++) {
			p1[i].cards_value = cards[4 * i].value;
			p1[i].colorl = cards[4 * i].color;
			p2[i].cards_value = cards[4 * i + 1].value;
			p2[i].colorl = cards[4 * i + 1].color;
			p3[i].cards_value = cards[4 * i + 2].value;
			p3[i].colorl = cards[4 * i + 2].color;
			p4[i].cards_value = cards[4 * i + 3].value;
			p4[i].colorl = cards[4 * i + 3].color;

		}
	}
	else if (n == 5) {
		for (int i = 0; i < g + k * o; i++) {
			p1[i].cards_value = cards[5 * i].value;
			p1[i].colorl = cards[5 * i].color;
			p2[i].cards_value = cards[5 * i + 1].value;
			p2[i].colorl = cards[5 * i + 1].color;
			p3[i].cards_value = cards[5 * i + 2].value;
			p3[i].colorl = cards[5 * i + 2].color;
			p4[i].cards_value = cards[5 * i + 3].value;
			p4[i].colorl = cards[5 * i + 3].color;
			p5[i].cards_value = cards[5 * i + 4].value;
			p5[i].colorl = cards[5 * i + 4].color;
		}
	}
	else if (n == 6) {
		for (int i = 0; i < g + k * o; i++) {
			p1[i].cards_value = cards[6 * i].value;
			p1[i].colorl = cards[6 * i].color;
			p2[i].cards_value = cards[6 * i + 1].value;
			p2[i].colorl = cards[6 * i + 1].color;
			p3[i].cards_value = cards[6 * i + 2].value;
			p3[i].colorl = cards[6 * i + 2].color;
			p4[i].cards_value = cards[6 * i + 3].value;
			p4[i].colorl = cards[6 * i + 3].color;
			p5[i].cards_value = cards[6 * i + 4].value;
			p5[i].colorl = cards[6 * i + 4].color;
			p6[i].cards_value = cards[6 * i + 5].value;
			p6[i].colorl = cards[6 * i + 5].color;
		}
	}
}


void making_deck(int k, int g, int gv, int o) {
	int min = g;
	int value[200];


	for (int i = 0; i < g; i++) {
		cards[i].value = gv;
		cards[i].color = "green";
		cards->quantity++;
	}
	for (int i = g; i < o + g; i++) {
		cin >> value[i];
	}
	while (min < k * o + g) {
		for (int j = g; j < o + g; j++) {
			value[min] = value[j];
			min++;
		}
	}
	for (int i = g; i < g + k * o; i++)
		cards[i].value = value[i];

	for (int i = g; i < g + k * o; i++) 
		cards->quantity++;

	if (k == 1) {
		for (int i = g; i < g + k * o; i++) {
			cards->quantity++;
			cards[i].color = "blue";

		}
	}
	else if (k == 2) {
		for (int j = g; j < g + o; j++)
			cards[j].color = "blue";
		for (int i = g + o; i < g + 2 * o; i++)
			cards[i].color = "red";
	}
	else if (k == 3) {
		for (int j = g; j < g + o; j++) {
			cards[j].color = "blue";
			for (int i = g + o; i < g + 2 * o; i++)
				cards[i].color = "red";
			for (int i = g + 2 * o; i < g + 3 * o; i++)
				cards[i].color = "violet";
		}
	}
	else if (k == 4) {
		for (int i = g; i < g + o; i++)
			cards[i].color = "blue";
		for (int i = g + o; i < g + 2 * o; i++)
			cards[i].color = "red";
		for (int i = g + 2 * o; i < g + 3 * o; i++)
			cards[i].color = "violet";
		for (int i = g + 3 * o; i < g + 4 * o; i++)
			cards[i].color = "yellow";
	}
	else if (k == 5) {
		for (int i = g; i < g + o; i++)
			cards[i].color = "blue";
		for (int i = g + o; i < g + 2 * o; i++)
			cards[i].color = "red";
		for (int i = g + 2 * o; i < g + 3 * o; i++)
			cards[i].color = "violet";
		for (int i = g + 3 * o; i < g + 4 * o; i++)
			cards[i].color = "yellow";
		for (int i = g + 4 * o; i < g + 5 * o; i++)
			cards[i].color = "white";
	}
	else if (k == 6) {
		for (int i = g; i < g + o; i++)
			cards[i].color = "blue";
		for (int i = g + o; i < g + 2 * o; i++)
			cards[i].color = "red";
		for (int i = g + 2 * o; i < g + 3 * o; i++)
			cards[i].color = "violet";
		for (int i = g + 3 * o; i < g + 4 * o; i++)
			cards[i].color = "yellow";
		for (int i = g + 4 * o; i < g + 5 * o; i++)
			cards[i].color = "white";
		for (int i = g + 5 * o; i < g + 6 * o; i++)
			cards[i].color = "black";
	}
}





void print_deck() {
	int n;
	cout << "active player = " << p1->number << endl;
	cout << "playeres number = ";
	cin >> n;
}

	cout << "1 player hand cards : ";
	for (int i = 0; p1[i].cards_value != 0; i++) {
		cout << p1[i].cards_value << " " << p1[i].colorl << " ";
	}
		cout << endl;
		cout << "2 player hand cards : ";
		for (int i = 0; p2[i].cards_value != 0; i++) {
		cout << p2[i].cards_value << " " << p2[i].colorl << " ";
	}
		cout << endl;
		if (n >= 3) {
			cout << "3 player hand cards : ";
			for (int i = 0; p3[i].cards_value != 0; i++) {
				cout << p3[i].cards_value << " " << p3[i].colorl << " ";
			}
			cout << endl;
			if (n >= 4) {
				cout << "4 player hand cards : ";
				for (int i = 0; p4[i].cards_value != 0; i++) {
					cout << p4[i].cards_value << " " << p4[i].colorl << " ";
				}
				cout << endl;
				if(n >= 5)
					cout << "5 player hand cards : ";
				for (int i = 0; p5[i].cards_value != 0; i++) {
					cout << p5[i].cards_value << " " << p5[i].colorl << " ";
				}
				cout << endl;
				if (n == 6) {
					cout << "6 player hand cards : ";
					for (int i = 0; p6[i].cards_value != 0; i++) {
						cout << p6[i].cards_value << " " << p6[i].colorl << " ";
					}
				}
			}
		}
		cout << endl;
		for (int i = 1; i <= k; i++) {
			cout << i << " pile cards:" << endl;
		}
}
*/
void load_game(int n){  
	p1[0].cards_value = 1;
	p2[0].cards_value = 1;
	int i = 0;
	int e = 0;
	cout << "1 player hand cards : ";
	while ( p1[i].cards_value != 0) {
		cin >> p1[i].cards_value >> p1[i].colorl;
		i++;
	}
	cout << "2 player hand cards : ";
	while (p2[e].cards_value != 0) {
		cin >> p1[e].cards_value >> p1[e].colorl;
		e++;
	}
}



int main() { 
	p1->number = 1;
	p2->number = 2;
	p3->number = 3;
	p4->number = 4;
	p5->number = 5;
	p6->number = 6;

	int n;
	cout << "active player = " << p1->number << endl;
	cout << "playeres number = ";
	cin >> n;

	load_game(n);

	/*
	int n = 0, k = 0, g = 0, gv = 0, o = 0;
	do {
		cin >> n;
	} while (n > 6 || n < 2);
	
	do {
		cin >> k;
	} while (k > 6 || k < 1);

	do {
		cin >> g;
	} while (g < 1 || g > 9);

	do {
		cin >> gv;
	} while (gv < 1 || gv > 10);
	do {
		cin >> o;
	} while (o < 1 || o > 20);
	*/
	//making_deck(k, g, gv, o);
	//dealing_cards(n, k, g, gv, o);
}

// na STOSIE mamy kolejne etapy tej gry do uploadowania, kod ten wyłączany jest do poprzedniego etapu, teraz zmienił sie input i od nowa piszę
